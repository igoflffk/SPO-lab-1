/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : GrammarC.g
 *     -                            On : 2023-10-09 15:30:22
 *     -                for the parser : GrammarCParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
GrammarCParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pGrammarCParser, which is returned from a call to GrammarCParserNew().
 *
 * The methods in pGrammarCParser are  as follows:
 *
 *  - 
 GrammarCParser_identifier_return
      pGrammarCParser->identifier(pGrammarCParser)
 *  - 
 GrammarCParser_program_return
      pGrammarCParser->program(pGrammarCParser)
 *  - 
 GrammarCParser_type_return
      pGrammarCParser->type(pGrammarCParser)
 *  - 
 GrammarCParser_typeAtom_return
      pGrammarCParser->typeAtom(pGrammarCParser)
 *  - 
 GrammarCParser_arrayTypeSpec_return
      pGrammarCParser->arrayTypeSpec(pGrammarCParser)
 *  - 
 GrammarCParser_arrayTypeSpecStep_return
      pGrammarCParser->arrayTypeSpecStep(pGrammarCParser)
 *  - 
 GrammarCParser_block_return
      pGrammarCParser->block(pGrammarCParser)
 *  - 
 GrammarCParser_statement_return
      pGrammarCParser->statement(pGrammarCParser)
 *  - 
 GrammarCParser_varStatement_return
      pGrammarCParser->varStatement(pGrammarCParser)
 *  - 
 GrammarCParser_selectionStatement_return
      pGrammarCParser->selectionStatement(pGrammarCParser)
 *  - 
 GrammarCParser_iterationStatement_return
      pGrammarCParser->iterationStatement(pGrammarCParser)
 *  - 
 GrammarCParser_doLoopKind_return
      pGrammarCParser->doLoopKind(pGrammarCParser)
 *  - 
 GrammarCParser_jumpStatement_return
      pGrammarCParser->jumpStatement(pGrammarCParser)
 *  - 
 GrammarCParser_expr_return
      pGrammarCParser->expr(pGrammarCParser)
 *  - 
 GrammarCParser_literal_return
      pGrammarCParser->literal(pGrammarCParser)
 *  - 
 GrammarCParser_atom_return
      pGrammarCParser->atom(pGrammarCParser)
 *  - 
 GrammarCParser_unary_return
      pGrammarCParser->unary(pGrammarCParser)
 *  - 
 GrammarCParser_neg_return
      pGrammarCParser->neg(pGrammarCParser)
 *  - 
 GrammarCParser_not_return
      pGrammarCParser->not(pGrammarCParser)
 *  - 
 GrammarCParser_inv_return
      pGrammarCParser->inv(pGrammarCParser)
 *  - 
 GrammarCParser_bracesExpr_return
      pGrammarCParser->bracesExpr(pGrammarCParser)
 *  - 
 GrammarCParser_callOrIndexerExpr_return
      pGrammarCParser->callOrIndexerExpr(pGrammarCParser)
 *  - 
 GrammarCParser_operandsSpec_return
      pGrammarCParser->operandsSpec(pGrammarCParser)
 *  - 
 GrammarCParser_aexpr_return
      pGrammarCParser->aexpr(pGrammarCParser)
 *  - 
 GrammarCParser_aarg_return
      pGrammarCParser->aarg(pGrammarCParser)
 *  - 
 GrammarCParser_condExpr_return
      pGrammarCParser->condExpr(pGrammarCParser)
 *  - 
 GrammarCParser_condArg_return
      pGrammarCParser->condArg(pGrammarCParser)
 *  - 
 GrammarCParser_comparisonOperator_return
      pGrammarCParser->comparisonOperator(pGrammarCParser)
 *  - 
 GrammarCParser_sexpr_return
      pGrammarCParser->sexpr(pGrammarCParser)
 *  - 
 GrammarCParser_sarg_return
      pGrammarCParser->sarg(pGrammarCParser)
 *  - 
 GrammarCParser_mexpr_return
      pGrammarCParser->mexpr(pGrammarCParser)
 *  - 
 GrammarCParser_marg_return
      pGrammarCParser->marg(pGrammarCParser)
 *  - 
 GrammarCParser_sop_return
      pGrammarCParser->sop(pGrammarCParser)
 *  - 
 GrammarCParser_mop_return
      pGrammarCParser->mop(pGrammarCParser)
 *  - 
 GrammarCParser_formalParameter_return
      pGrammarCParser->formalParameter(pGrammarCParser)
 *  - 
 GrammarCParser_funcSignature_return
      pGrammarCParser->funcSignature(pGrammarCParser)
 *  - 
 GrammarCParser_funcDef_return
      pGrammarCParser->funcDef(pGrammarCParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GrammarCParser_H
#define _GrammarCParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct GrammarCParser_Ctx_struct GrammarCParser, * pGrammarCParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct GrammarCParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_identifier_return;



typedef struct GrammarCParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_program_return;



typedef struct GrammarCParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_type_return;



typedef struct GrammarCParser_typeAtom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_typeAtom_return;



typedef struct GrammarCParser_arrayTypeSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_arrayTypeSpec_return;



typedef struct GrammarCParser_arrayTypeSpecStep_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_arrayTypeSpecStep_return;



typedef struct GrammarCParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_block_return;



typedef struct GrammarCParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_statement_return;



typedef struct GrammarCParser_varStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_varStatement_return;



typedef struct GrammarCParser_selectionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_selectionStatement_return;



typedef struct GrammarCParser_iterationStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_iterationStatement_return;



typedef struct GrammarCParser_doLoopKind_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_doLoopKind_return;



typedef struct GrammarCParser_jumpStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_jumpStatement_return;



typedef struct GrammarCParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_expr_return;



typedef struct GrammarCParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_literal_return;



typedef struct GrammarCParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_atom_return;



typedef struct GrammarCParser_unary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_unary_return;



typedef struct GrammarCParser_neg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_neg_return;



typedef struct GrammarCParser_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_not_return;



typedef struct GrammarCParser_inv_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_inv_return;



typedef struct GrammarCParser_bracesExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_bracesExpr_return;



typedef struct GrammarCParser_callOrIndexerExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_callOrIndexerExpr_return;



typedef struct GrammarCParser_operandsSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_operandsSpec_return;



typedef struct GrammarCParser_aexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_aexpr_return;



typedef struct GrammarCParser_aarg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_aarg_return;



typedef struct GrammarCParser_condExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_condExpr_return;



typedef struct GrammarCParser_condArg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_condArg_return;



typedef struct GrammarCParser_comparisonOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_comparisonOperator_return;



typedef struct GrammarCParser_sexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_sexpr_return;



typedef struct GrammarCParser_sarg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_sarg_return;



typedef struct GrammarCParser_mexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_mexpr_return;



typedef struct GrammarCParser_marg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_marg_return;



typedef struct GrammarCParser_sop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_sop_return;



typedef struct GrammarCParser_mop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_mop_return;



typedef struct GrammarCParser_formalParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_formalParameter_return;



typedef struct GrammarCParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_funcSignature_return;



typedef struct GrammarCParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarCParser_funcDef_return;




/** Context tracking structure for 
GrammarCParser

 */
struct GrammarCParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     GrammarCParser_identifier_return
     (*identifier)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_program_return
     (*program)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_type_return
     (*type)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_typeAtom_return
     (*typeAtom)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_arrayTypeSpec_return
     (*arrayTypeSpec)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_arrayTypeSpecStep_return
     (*arrayTypeSpecStep)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_block_return
     (*block)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_statement_return
     (*statement)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_varStatement_return
     (*varStatement)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_selectionStatement_return
     (*selectionStatement)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_iterationStatement_return
     (*iterationStatement)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_doLoopKind_return
     (*doLoopKind)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_jumpStatement_return
     (*jumpStatement)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_expr_return
     (*expr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_literal_return
     (*literal)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_atom_return
     (*atom)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_unary_return
     (*unary)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_neg_return
     (*neg)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_not_return
     (*not)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_inv_return
     (*inv)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_bracesExpr_return
     (*bracesExpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_callOrIndexerExpr_return
     (*callOrIndexerExpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_operandsSpec_return
     (*operandsSpec)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_aexpr_return
     (*aexpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_aarg_return
     (*aarg)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_condExpr_return
     (*condExpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_condArg_return
     (*condArg)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_comparisonOperator_return
     (*comparisonOperator)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_sexpr_return
     (*sexpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_sarg_return
     (*sarg)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_mexpr_return
     (*mexpr)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_marg_return
     (*marg)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_sop_return
     (*sop)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_mop_return
     (*mop)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_formalParameter_return
     (*formalParameter)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_funcSignature_return
     (*funcSignature)	(struct GrammarCParser_Ctx_struct * ctx);

     GrammarCParser_funcDef_return
     (*funcDef)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred25_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred26_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred27_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred28_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred29_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred42_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred44_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred45_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred46_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred48_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred49_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred50_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred52_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred55_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred56_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred57_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_GrammarC)	(struct GrammarCParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct GrammarCParser_Ctx_struct * ctx);
    void	    (*free)   (struct GrammarCParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pGrammarCParser GrammarCParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pGrammarCParser GrammarCParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define ARG_DEF      4
#define ASSIGN      5
#define AST_ARR_DIM_SEPARATOR      6
#define AST_ARR_DIM_SPEC      7
#define AST_BLOCK      8
#define AST_EXPR_DIV      9
#define AST_EXPR_EQUAL      10
#define AST_EXPR_GREATER      11
#define AST_EXPR_INV      12
#define AST_EXPR_LESS      13
#define AST_EXPR_MUL      14
#define AST_EXPR_NEG      15
#define AST_EXPR_NOT      16
#define AST_EXPR_SUB      17
#define AST_EXPR_SUM      18
#define AST_ID      19
#define AST_KW_BOOL      20
#define AST_KW_BYTE      21
#define AST_KW_CHAR      22
#define AST_KW_INT      23
#define AST_KW_LONG      24
#define AST_KW_STRING      25
#define AST_KW_UINT      26
#define AST_KW_ULONG      27
#define AST_KW_VOID      28
#define AST_TYPE_REF      29
#define BITSCONST      30
#define BLOCK      31
#define BOOL      32
#define BREAK_STMT      33
#define CHAR      34
#define COMMA      35
#define DO_STMT      36
#define DoubleStringCharacter      37
#define EQ      38
#define EscapeCharacter      39
#define EscapeSequence      40
#define FUNC_DECL      41
#define FUNC_DEF      42
#define FUNC_HDR      43
#define HEXCONST      44
#define ID      45
#define IF_STMT      46
#define INT      47
#define NonEscapeCharacter      48
#define PLUS      49
#define STR      50
#define SingleEscapeCharacter      51
#define SingleStringCharacter      52
#define StringLiteral      53
#define VAR_STMT      54
#define WHILE_STMT      55
#define WS      56
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for GrammarCParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
