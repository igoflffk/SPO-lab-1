/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : GrammarC.g
 *     -                            On : 2023-10-09 15:30:22
 *     -                 for the lexer : GrammarCLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
GrammarCLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pGrammarCLexer, which is returned from a call to GrammarCLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pGrammarCLexer are  as follows:
 *
 *  - 
 void
      pGrammarCLexer->T__57(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__58(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__59(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__60(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__61(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__62(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__63(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__64(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__65(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__66(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__67(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__68(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__69(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__70(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__71(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__72(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__73(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__74(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__75(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__76(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__77(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__78(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__79(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__80(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__81(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__82(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__83(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__84(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__85(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__86(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__87(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->T__88(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->StringLiteral(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->DoubleStringCharacter(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->SingleStringCharacter(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->EscapeSequence(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->NonEscapeCharacter(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->SingleEscapeCharacter(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->EscapeCharacter(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->STR(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->CHAR(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->BITSCONST(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->BOOL(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->ID(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->INT(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->HEXCONST(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->EQ(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->ASSIGN(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->PLUS(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->COMMA(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->WS(pGrammarCLexer)
 *  - 
 void
      pGrammarCLexer->Tokens(pGrammarCLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GrammarCLexer_H
#define _GrammarCLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct GrammarCLexer_Ctx_struct GrammarCLexer, * pGrammarCLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
GrammarCLexer

 */
struct GrammarCLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__57)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mStringLiteral)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mDoubleStringCharacter)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mSingleStringCharacter)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mNonEscapeCharacter)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mSingleEscapeCharacter)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mEscapeCharacter)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mSTR)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mBITSCONST)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mBOOL)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mHEXCONST)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct GrammarCLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct GrammarCLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct GrammarCLexer_Ctx_struct * ctx);
    void	    (*free)   (struct GrammarCLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pGrammarCLexer GrammarCLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pGrammarCLexer GrammarCLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define ARG_DEF      4
#define ASSIGN      5
#define AST_ARR_DIM_SEPARATOR      6
#define AST_ARR_DIM_SPEC      7
#define AST_BLOCK      8
#define AST_EXPR_DIV      9
#define AST_EXPR_EQUAL      10
#define AST_EXPR_GREATER      11
#define AST_EXPR_INV      12
#define AST_EXPR_LESS      13
#define AST_EXPR_MUL      14
#define AST_EXPR_NEG      15
#define AST_EXPR_NOT      16
#define AST_EXPR_SUB      17
#define AST_EXPR_SUM      18
#define AST_ID      19
#define AST_KW_BOOL      20
#define AST_KW_BYTE      21
#define AST_KW_CHAR      22
#define AST_KW_INT      23
#define AST_KW_LONG      24
#define AST_KW_STRING      25
#define AST_KW_UINT      26
#define AST_KW_ULONG      27
#define AST_KW_VOID      28
#define AST_TYPE_REF      29
#define BITSCONST      30
#define BLOCK      31
#define BOOL      32
#define BREAK_STMT      33
#define CHAR      34
#define COMMA      35
#define DO_STMT      36
#define DoubleStringCharacter      37
#define EQ      38
#define EscapeCharacter      39
#define EscapeSequence      40
#define FUNC_DECL      41
#define FUNC_DEF      42
#define FUNC_HDR      43
#define HEXCONST      44
#define ID      45
#define IF_STMT      46
#define INT      47
#define NonEscapeCharacter      48
#define PLUS      49
#define STR      50
#define SingleEscapeCharacter      51
#define SingleStringCharacter      52
#define StringLiteral      53
#define VAR_STMT      54
#define WHILE_STMT      55
#define WS      56
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for GrammarCLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
